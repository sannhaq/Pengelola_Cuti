// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  APPROVE
  WAITING
  REJECT
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  users           User[]
  rolePermissions RolePermission[]
}

model User {
  id       Int         @id @default(autoincrement())
  email    String      @unique
  password String
  isFirst  Boolean
  role     Role        @relation(fields: [roleId], references: [id])
  roleId   Int
  employee Employee?
  tokens   UserToken[]
}

model TypeOfEmployee {
  id            Int        @id @default(autoincrement())
  isContract    Boolean
  startContract DateTime   @db.Date
  endContract   DateTime?  @db.Date
  newContract   Boolean
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  employees     Employee[]
}

model Positions {
  id        Int        @id @default(autoincrement())
  name      String
  employees Employee[]
}

model Employee {
  nik              String          @id
  name             String
  isWorking        Boolean
  positions        Positions       @relation(fields: [positionId], references: [id])
  positionId       Int
  historicalName   String
  historicalNik    String
  amountOfLeave    Int
  user             User            @relation(fields: [userId], references: [id])
  userId           Int             @unique
  typeOfEmployee   TypeOfEmployee  @relation(fields: [typeOfEmployeeId], references: [id])
  typeOfEmployeeId Int
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  leaveEmployees   LeaveEmployee[]
}

model TypeOfLeave {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  leaves     Leave[]
}

model Leave {
  id             Int             @id @default(autoincrement())
  typeOfLeave    TypeOfLeave     @relation(fields: [typeOfLeaveId], references: [id])
  typeOfLeaveId  Int
  startLeave     DateTime        @db.Date
  endLeave       DateTime        @db.Date
  reason         String
  leaveEmployees LeaveEmployee[]
}

model UserToken {
  id           Int      @id @default(autoincrement())
  refreshToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  expired_at   DateTime
}

model LeaveEmployee {
  id          Int      @id @default(autoincrement())
  leaveId     Int
  leave       Leave    @relation(fields: [leaveId], references: [id])
  employeeNik String
  employee    Employee @relation(fields: [employeeNik], references: [nik])
  status      Status   @default(WAITING)
}

model Permission {
  id             Int              @id @default(autoincrement())
  name           String
  created_at     DateTime         @default(now())
  rolePermission RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
}
