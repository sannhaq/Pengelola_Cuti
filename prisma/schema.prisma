// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  APPROVE
  WAITING
  REJECT
}

enum Gender {
  L
  P
}

enum GenderSpecialLeave {
  L
  P
  LP
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      User[]
}

model User {
  id       Int         @id @default(autoincrement())
  email    String      @unique
  password String
  isFirst  Boolean
  role     Role        @relation(fields: [roleId], references: [id])
  roleId   Int
  employee Employee?
  tokens   UserToken[]
}

model TypeOfEmployee {
  id            Int        @id @default(autoincrement())
  isContract    Boolean
  startContract DateTime   @db.Date
  endContract   DateTime?  @db.Date
  newContract   Boolean
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  employees     Employee[]
}

model Positions {
  id        Int        @id @default(autoincrement())
  name      String
  employees Employee[]
}

model Employee {
  nik                   String                 @id
  name                  String
  isWorking             Boolean
  positions             Positions              @relation(fields: [positionId], references: [id])
  positionId            Int
  historicalName        String
  historicalNik         String
  amountOfLeave         AmountOfLeave[]
  gender                Gender
  user                  User                   @relation(fields: [userId], references: [id])
  userId                Int                    @unique
  typeOfEmployee        TypeOfEmployee         @relation(fields: [typeOfEmployeeId], references: [id])
  typeOfEmployeeId      Int
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt
  leaveEmployees        LeaveEmployee[]
  employeeSpecialLeaves EmployeeSpecialLeave[]
  deductedLeaves        DeductedLeave[]
}

model AmountOfLeave {
  id          Int      @id @default(autoincrement())
  amount      Int
  year        Int
  isActive    Boolean
  employee    Employee @relation(fields: [employeeNik], references: [nik])
  employeeNik String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model TypeOfLeave {
  id            Int            @id @default(autoincrement())
  name          String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  leaves        Leave[]
  specialLeaves SpecialLeave[]
}

model Leave {
  id             Int             @id @default(autoincrement())
  typeOfLeave    TypeOfLeave     @relation(fields: [typeOfLeaveId], references: [id])
  typeOfLeaveId  Int
  startLeave     DateTime        @db.Date
  endLeave       DateTime        @db.Date
  reason         String
  leaveEmployees LeaveEmployee[]
  deductedLeaves DeductedLeave[]
}

model UserToken {
  id           Int      @id @default(autoincrement())
  refreshToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  expired_at   DateTime
}

model LeaveEmployee {
  id          Int      @id @default(autoincrement())
  leaveId     Int
  leave       Leave    @relation(fields: [leaveId], references: [id])
  employeeNik String
  employee    Employee @relation(fields: [employeeNik], references: [nik])
  status      Status   @default(WAITING)
  note        String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model SpecialLeave {
  id                    Int                    @id @default(autoincrement())
  leaveTitle            String
  gender                GenderSpecialLeave
  amount                Int
  typeOfLeave           TypeOfLeave            @relation(fields: [typeOfLeaveId], references: [id])
  typeOfLeaveId         Int
  leaveInformation      String                 @db.Text
  employeeSpecialLeaves EmployeeSpecialLeave[]
}

model EmployeeSpecialLeave {
  id             Int          @id @default(autoincrement())
  employee       Employee     @relation(fields: [employeeNik], references: [nik])
  employeeNik    String
  specialLeave   SpecialLeave @relation(fields: [specialLeaveId], references: [id])
  specialLeaveId Int
  status         Status       @default(WAITING)
  startLeave     DateTime     @db.Date
  endLeave       DateTime     @db.Date
  note           String?
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
}

model DeductedLeave {
  id                 Int      @id @default(autoincrement())
  leave              Leave    @relation(fields: [leaveId], references: [id])
  leaveId            Int
  employee           Employee @relation(fields: [employeeNik], references: [nik])
  employeeNik        String
  previousYearDeduct Int?
  currentYearDeduct  Int?
}
